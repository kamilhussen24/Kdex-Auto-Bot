from telethon import TelegramClient, events, functions
from telethon.tl.types import ChannelParticipantsAdmins, ChatBannedRights
from datetime import datetime
import asyncio, pytz, os

# -------------------------------
# Environment Variables
# -------------------------------
API_ID = int(os.getenv("API_ID", 1234567))
API_HASH = os.getenv("API_HASH", "your_api_hash")
BOT_TOKEN = os.getenv("BOT_TOKEN", "your_bot_token")
GROUP_ID = int(os.getenv("GROUP_ID", "-1003083776944"))  # Ensure it's a string in ENV

# -------------------------------
# Initialize Client
# -------------------------------
client = TelegramClient("bot", API_ID, API_HASH).start(bot_token=BOT_TOKEN)
bd_tz = pytz.timezone("Asia/Dhaka")

# -------------------------------
# Admin Check
# -------------------------------
async def is_admin(event):
    try:
        admins = await client.get_participants(event.chat_id, filter=ChannelParticipantsAdmins)
        return any(admin.id == event.sender_id for admin in admins)
    except:
        return False

# -------------------------------
# Lock Group
# -------------------------------
async def lock_group(duration_hours=None):
    rights = ChatBannedRights(send_messages=True)
    try:
        await client(functions.messages.EditChatDefaultBannedRights(peer=GROUP_ID, banned_rights=rights))
        if duration_hours:
            await client.send_message(
                GROUP_ID, f"üîí ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡¶ü‡¶ø {duration_hours} ‡¶ò‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡¶®‡ßç‡¶ß ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶® üí¨"
            )
            await asyncio.sleep(duration_hours * 3600)
            await unlock_group(auto=True)
        else:
            await client.send_message(GROUP_ID, "üîí ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡¶ü‡¶ø ‡¶è‡¶ñ‡¶® ‡¶¨‡¶®‡ßç‡¶ß ‡¶∞‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
    except Exception as e:
        print("Lock error:", e)

# -------------------------------
# Unlock Group
# -------------------------------
async def unlock_group(auto=False):
    rights = ChatBannedRights(send_messages=False)
    try:
        await client(functions.messages.EditChatDefaultBannedRights(peer=GROUP_ID, banned_rights=rights))
        msg = (
            "‚úÖ ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶ø‡¶§ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶∂‡ßá‡¶∑ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡¶ü‡¶ø ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá üí´"
            if auto
            else "‚úÖ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡¶ü‡¶ø ‡¶Ü‡¶®‡¶≤‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá, ‡¶è‡¶ñ‡¶® ‡¶∏‡¶¨‡¶æ‡¶á ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶® üòÑ"
        )
        await client.send_message(GROUP_ID, msg)
    except Exception as e:
        print("Unlock error:", e)

# -------------------------------
# /lock Command
# -------------------------------
@client.on(events.NewMessage(pattern=r"^/lockfor(?: (\d+)h)?$"))
async def lock_handler(event):
    if not await is_admin(event):
        await event.reply("‚ö†Ô∏è ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§")
        return
    duration = event.pattern_match.group(1)
    if duration:
        await lock_group(int(duration))
    else:
        await lock_group()

# -------------------------------
# /unlock Command
# -------------------------------
@client.on(events.NewMessage(pattern=r"^/openchat$"))
async def unlock_handler(event):
    if not await is_admin(event):
        await event.reply("‚ö†Ô∏è ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§")
        return
    await unlock_group()
# -------------------------------
# /start Command
# -------------------------------
@client.on(events.NewMessage(pattern=r"^/start$"))
async def start_handler(event):
    message = (
        "ü§ñ ‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! ‡¶Ü‡¶Æ‡¶ø **KDex Group** ‡¶è‡¶∞ ‡¶è‡¶ï‡¶ú‡¶® ‡¶¶‡¶æ‡ßü‡¶ø‡¶§‡ßç‡¶¨‡¶∂‡ßÄ‡¶≤ ‡¶¨‡¶ü‡•§\n"
        "‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶®‡¶æ‡¶°‡¶º‡¶æ‡¶ö‡¶æ‡¶°‡¶º‡¶æ ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ, ‡¶Ü‡¶Æ‡¶ø ‡¶Ö‡¶®‡ßá‡¶ï ‡¶¨‡ßç‡¶Ø‡¶∏‡ßç‡¶§ ‡¶•‡¶æ‡¶ï‡¶ø ‡¶∏‡¶¨‡¶∏‡¶Æ‡¶Ø‡¶º üòå\n\n"
        "üîê ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú: ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶≠‡¶æ‡¶¨‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶≤‡¶ï ‡¶Ü‡¶®‡¶≤‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶∂‡ßÉ‡¶ô‡ßç‡¶ñ‡¶≤‡¶æ ‡¶¨‡¶ú‡¶æ‡¶Ø‡¶º ‡¶∞‡¶æ‡¶ñ‡¶æ üõ°Ô∏è"
    )
    await event.reply(message)

# -------------------------------
# Auto Night Lock (2AM‚Äì6AM)
# -------------------------------
async def auto_night_lock():
    while True:
        now = datetime.now(bd_tz)
        if now.hour == 2 and now.minute == 0:
            await lock_group()
            await client.send_message(GROUP_ID, "üåô ‡¶è‡¶ñ‡¶® ‡¶∞‡¶æ‡¶§ ‡ß®‡¶ü‡¶æ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡¶ü‡¶ø ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá (‡¶∏‡¶ï‡¶æ‡¶≤ ‡ß¨‡¶ü‡¶æ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§)‡•§")
            await asyncio.sleep(4 * 3600)  # Wait 4 hours
            await unlock_group(auto=True)
        await asyncio.sleep(30)  # Check every 30 seconds

# -------------------------------
# Main Function
# -------------------------------
async def main():
    asyncio.create_task(auto_night_lock())
    await client.run_until_disconnected()

# -------------------------------
# Start Bot
# -------------------------------
print("üöÄ Smart Telegram Group Lock Bot started...")
client.loop.run_until_complete(main())
