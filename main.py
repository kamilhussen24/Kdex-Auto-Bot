from telethon import TelegramClient, events
from telethon.tl.types import ChatBannedRights
from datetime import datetime
import asyncio, pytz, os

# -------------------------------
# Environment Variables
# -------------------------------
API_ID = int(os.getenv("API_ID", 1234567))
API_HASH = os.getenv("API_HASH", "your_api_hash")
BOT_TOKEN = os.getenv("BOT_TOKEN", "your_bot_token")
GROUP_ID = int(os.getenv("GROUP_ID", "-1003083776944"))

# -------------------------------
# Initialize Client
# -------------------------------
client = TelegramClient("bot", API_ID, API_HASH).start(bot_token=BOT_TOKEN)
bd_tz = pytz.timezone("Asia/Dhaka")

# -------------------------------
# Admin Check (Fixed)
# -------------------------------
async def is_admin(event):
    try:
        participant = await client.get_participant(event.chat_id, event.sender)
        return getattr(participant, 'admin_rights', None) is not None
    except Exception as e:
        print(f"[ADMIN CHECK ERROR] {e}")
        return False

# -------------------------------
# Lock Group
# -------------------------------
async def lock_group(duration_hours=None):
    rights = ChatBannedRights(send_messages=True)
    try:
        await client(functions.messages.EditChatDefaultBannedRightsRequest(
            peer=GROUP_ID, banned_rights=rights
        ))
        if duration_hours:
            await client.send_message(
                GROUP_ID,
                f"‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡¶ü‡¶ø {duration_hours} ‡¶ò‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡¶®‡ßç‡¶ß ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®"
            )
            await asyncio.sleep(duration_hours * 3600)
            await unlock_group(auto=True)
        else:
            await client.send_message(GROUP_ID, "‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡¶ü‡¶ø ‡¶è‡¶ñ‡¶® ‡¶¨‡¶®‡ßç‡¶ß ‡¶∞‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
    except Exception as e:
        print(f"[LOCK ERROR] {e}")

# -------------------------------
# Unlock Group
# -------------------------------
async def unlock_group(auto=False):
    rights = ChatBannedRights(send_messages=False)
    try:
        await client(functions.messages.EditChatDefaultBannedRightsRequest(
            peer=GROUP_ID, banned_rights=rights
        ))
        msg = (
            "‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶ø‡¶§ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶∂‡ßá‡¶∑‡•§ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡¶ü‡¶ø ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá"
            if auto
            else "‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡¶ü‡¶ø ‡¶Ü‡¶®‡¶≤‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá, ‡¶è‡¶ñ‡¶® ‡¶∏‡¶¨‡¶æ‡¶á ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®"
        )
        await client.send_message(GROUP_ID, msg)
    except Exception as e:
        print(f"[UNLOCK ERROR] {e}")

# -------------------------------
# /lockfor Command (case-insensitive)
# -------------------------------
@client.on(events.NewMessage(pattern=r"(?i)^/lockfor(?:\s+(\d+)h?)?$", chats=GROUP_ID))
async def lock_handler(event):
    if not await is_admin(event):
        await event.reply("‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§")
        return

    duration_str = event.pattern_match.group(1)
    if duration_str:
        try:
            hours = int(duration_str)
            if hours <= 0:
                raise ValueError
            await lock_group(hours)
            await event.reply(f"‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ {hours} ‡¶ò‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≤‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
        except ValueError:
            await event.reply("‡¶∏‡¶†‡¶ø‡¶ï ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü: `/lockfor 5h` ‡¶Ö‡¶•‡¶¨‡¶æ `/lockfor 5`")
    else:
        await lock_group()
        await event.reply("‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶≤‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")

# -------------------------------
# /openchat Command
# -------------------------------
@client.on(events.NewMessage(pattern=r"(?i)^/openchat$", chats=GROUP_ID))
async def unlock_handler(event):
    if not await is_admin(event):
        await event.reply("‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§")
        return
    await unlock_group()
    await event.reply("‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶Ü‡¶®‡¶≤‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")

# -------------------------------
# /start Command (Private + Group, No Duplicate)
# -------------------------------
@client.on(events.NewMessage(pattern=r"(?i)^/start(@\w+)?$"))
async def start_handler(event):
    # Prevent duplicate handling
    if hasattr(event, "_handled_start"):
        return
    event._handled_start = True

    if event.is_private:
        message = (
            "‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! ‡¶Ü‡¶Æ‡¶ø **KDex Group** ‡¶è‡¶∞ ‡¶¶‡¶æ‡ßü‡¶ø‡¶§‡ßç‡¶¨‡¶∂‡ßÄ‡¶≤ ‡¶¨‡¶ü‡•§\n"
            "‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶¨‡¶ø‡¶∞‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ, ‡¶Ü‡¶Æ‡¶ø ‡¶Ö‡¶®‡ßá‡¶ï ‡¶¨‡ßç‡¶Ø‡¶∏‡ßç‡¶§ ‡¶•‡¶æ‡¶ï‡¶ø ‡¶∏‡¶¨‡¶∏‡¶Æ‡¶Ø‡¶º‡•§üòå\n\n"
            "‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú: ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶≠‡¶æ‡¶¨‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶≤‡¶ï/‡¶Ü‡¶®‡¶≤‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶∂‡ßÉ‡¶ô‡ßç‡¶ñ‡¶≤‡¶æ ‡¶¨‡¶ú‡¶æ‡¶Ø‡¶º ‡¶∞‡¶æ‡¶ñ‡¶æ‡•§"
        )
    else:
        message = (
            "‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! ‡¶Ü‡¶Æ‡¶ø **KDex Group** ‡¶è‡¶∞ ‡¶¶‡¶æ‡ßü‡¶ø‡¶§‡ßç‡¶¨‡¶∂‡ßÄ‡¶≤ ‡¶¨‡¶ü‡•§\n"
            "‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶¨‡¶ø‡¶∞‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ, ‡¶Ü‡¶Æ‡¶ø ‡¶Ö‡¶®‡ßá‡¶ï ‡¶¨‡ßç‡¶Ø‡¶∏‡ßç‡¶§ ‡¶•‡¶æ‡¶ï‡¶ø ‡¶∏‡¶¨‡¶∏‡¶Æ‡¶Ø‡¶º‡•§üòå\n\n"
            "‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú: ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶≠‡¶æ‡¶¨‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶≤‡¶ï/‡¶Ü‡¶®‡¶≤‡¶ï ‡¶ï‡¶∞‡¶æ‡•§"
        )
    await event.reply(message)

# -------------------------------
# Auto Night Lock (2:00 AM ‚Äì 6:00 AM Dhaka Time)
# -------------------------------
async def auto_night_lock():
    print("[AUTO LOCK] ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶≤‡¶ï ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá...")
    while True:
        try:
            now = datetime.now(bd_tz)
            current_time = now.strftime("%H:%M")
            
            # 2:00 AM - Lock
            if current_time == "02:00":
                print(f"[AUTO] {current_time} - ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶≤‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
                await lock_group(4)  # 4 hours
                await client.send_message(
                    GROUP_ID,
                    "‡¶è‡¶ñ‡¶® ‡¶∞‡¶æ‡¶§ ‡ß®‡¶ü‡¶æ‡•§ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá (‡¶∏‡¶ï‡¶æ‡¶≤ ‡ß¨‡¶ü‡¶æ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§)‡•§"
                )
                await asyncio.sleep(3600)  # Wait 1 hour before next check
                continue

            await asyncio.sleep(30)  # Check every 30 seconds
        except Exception as e:
            print(f"[AUTO LOCK ERROR] {e}")
            await asyncio.sleep(60)

# -------------------------------
# Main Function
# -------------------------------
async def main():
    print("Smart Telegram Group Lock Bot ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá...")
    # Start auto lock in background
    asyncio.create_task(auto_night_lock())
    await client.run_until_disconnected()

# -------------------------------
# Start Bot
# -------------------------------
with client:
    client.loop.run_until_complete(main())
